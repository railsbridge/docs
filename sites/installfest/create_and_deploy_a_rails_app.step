step "Change to your home directory" do
  option "Windows" do
    console "cd c:\\Sites"
  end
  option "Mac or Linux" do
    console "cd ~"
  end
end

step "Create a new Rails app" do

  console "rails new test_app"

  message "The command's output is voluminous, and will take some time to complete, with a long pause in the middle, after all the 'create...' statements ending in 'bundle install'.  When it fully completes, it will return you to your home prompt.  Look for the 'Your bundle is complete!' message just above."

  tip do
    message "On Linux, you may have to enable this line to your Gemfile:"
    pre "gem 'therubyracer', :platforms => :ruby"
	message "Just delete the '#' in front of the statement"
  end

  console "cd test_app"
  console "rails server"

  tip "Shortcut: Just type 'rails s'" do
    message <<-MARKDOWN
Throughout your Rails programming career you're going to type `rails server` a
lot.  In fact, you'll type this so much that DHH and the Rails Core team
decided to save you 5 keystrokes per server restart.  Simply typing `rails s`
is the same as `rails server`.
  MARKDOWN
  end

  message <<-MARKDOWN
The first command should produce no output.
If "rails server" starts up with no errors, you're golden! It'll look something like this:
  MARKDOWN

  result <<-TEXT
=> Booting WEBrick
=> Rails 3.2.6 application starting in development on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
[2010-09-30 21:04:12] INFO  WEBrick 1.3.1
[2010-09-30 21:04:12] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-30 21:04:12] INFO  WEBrick::HTTPServer#start: pid=24805 port=3000
  TEXT

message "If it does, congratulations! You've successfully installed Ruby AND Rails and started your server."

tip "If it doesn't work..." do
  link "diagnostics_for_windows"
  link "diagnostics_for_rvm"
end

message <<-MARKDOWN

* In your browser, go to <http://localhost:3000>

message "In Windows, you may need to let Ruby and Rails communicate through your firewall.  Say yes."

![Successful Rails Install](successful-rails-install.jpg)

* Back in the Terminal window where you ran <code>rails server</code>, type **Control-C** to kill(stop) the server.

  MARKDOWN
  important "On Windows, sometimes Control-C doesn't work. In that case, look for the key called 'Break' or 'Pause' and press Control-Break, then answer Y at the prompt."
  end

step "Generate a database model" do

  option "if your prompt doesn't already show that you are (still) in the test_app folder" do
    cd test_app
  end
  
  console <<-BASH
rails generate scaffold user name:string email:string address:text active:boolean
rake db:migrate
rails server
  BASH

  message "Wait until your console shows that the Webrick server has started (just like before).  Then, in the browser, visit <http://localhost:3000/users>"

  message "Click *New user* to create a user to make sure we can save to the database.  Click *Back* to see your results. (The window where you ran `rails server` will display debugging information as you do so.)"

  message "In your Terminal window where you ran `rails server`, type Control-C (or Control-Break,Y) to kill(stop) the server."

end

step "Use git" do

  option "if your prompt doesn't already show that you are (still) in the test_app folder" do
    cd test_app
  end
  
  console <<-BASH
git init
  BASH

  result "Initialized empty Git repository in c:/Sites/test_app/.git/"

  console "git add -A"
  tip "git add" do
    message <<-MARKDOWN
With Git, there are usually many ways to do very similar things.

  * `git add foo.txt` adds a file named `foo.txt`
  * `git add .` ("git add dot") adds all new files and changed files, but *keeps* files that you've deleted
  * `git add -A` adds everything, including deletions
  
"Adding deletions" may sound weird, but if you think of a version control system as keeping track of *changes*, it might make more sense.
    
    MARKDOWN
  end

  console "git commit -m \"initial commit\""
  result "a lot of lines like create mode 100644 Gemfile"

  console "git log"
  result "(Your git name and \"initial commit\" message.)"
end

step "Deploy your app to Heroku" do

  step "Create a Heroku application from this local Rails application." do

  message "The very first time you use `heroku` you must enter your Heroku email address and password.  If you are still in your original console session (where you installed the heroku gem), you won't be prompted for your credentials again."

  console "heroku create"
  result <<-OUTPUT
Enter your Heroku credentials.
Email: myemail@example.com
Password:
Uploading ssh public key /Users/smei/.ssh/id_rsa.pub
Creating floating-winter-18... done, stack is cedar
http://floating-winter-18.heroku.com/ | git@heroku.com:floating-winter-18.git
Git remote heroku added
  OUTPUT

    message "Heroku apps are automatically given lyrical names that look like '[adjective]-[noun]-[number]'.  Each name is different."
  
  console "git remote show"
  result "heroku"

  message "If you get messages here complaining about public keys it's probably due to some confusion with SSH key usage by another app on your computer.  Call a volunteer over to help you figure it out.  Luckily this only needs to be done the first time you create a Heroku app."
  end

  step "Prepare your rails app for deploying to Heroku" do
    message <<-MARKDOWN

Find your test_app folder and open it in a text-editor.
Inside, find a file named Gemfile.
Edit your Gemfile and change the line:

    gem 'sqlite3'

To this:

    group :development, :test do
      gem 'sqlite3'
    end
    group :production do
      gem 'pg'
    end

    MARKDOWN

    console <<-BASH
bundle install --without production
    BASH

    message "Again, wait for the console prompt, and look for the 'Your bundle is complete!' message just above.  If this fails, get a volunteer to help you edit `config/environments/production.rb` "
  end

  step "Add the changes to git" do

    console <<-BASH
git add .
git commit -m "Updates for heroku deployment"
    BASH
  end

  step "Deploy (push) to heroku" do

    console "git push heroku master"

    message "It may ask: \"The authenticity of host 'heroku.com (75.101.145.87)' can't be established. RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad. Are you sure you want to continue connecting (yes/no)?\" Type <code>yes</code> and hit *<enter>*."

    result <<-OUTPUT
The authenticity of host 'heroku.com (75.101.145.87)' can't be established.
RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'heroku.com,75.101.145.87' (RSA) to the list of known hosts.
Counting objects: 60, done.
Compressing objects: 100% (54/54), done.
Writing objects: 100% (60/60), 79.03 KiB, done.
Total 60 (delta 10), reused 0 (delta 0)

-----> Heroku receiving push
-----> Rails app detected
       Compiled slug size is 080K
-----> Launching...... done
       App deployed to Heroku

To git@heroku.com:floating-winter-18.git
 * [new branch]      master -> master
    OUTPUT

    important "Be sure to find and learn your Heroku application name in the output."

    message "This process will probably take about twice as long as your 'bundle install' and then will return you to your console prompt.  If it takes longer than that, click: [What to do if git seems stuck](what_to_do_if_git_seems_stuck)"

    console "heroku run rake db:migrate"

    result <<-OUTPUT
Running rake db:migrate attached to terminal... up, run.1
Migrating to CreateUsers (20111204065949)
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -> 0.0122s
==  CreateUsers: migrated (0.0123s) ===========================================
    OUTPUT

    message "The long number after CreateUsers is a timestamp. Yours will be different!"
  end

  step "Visit your new application" do

    message "In the browser, go to your application's URL. You'll need your Heroku application name."

    tip "To find your Heroku application name" do
      console "heroku info"
    end

    tip "To quickly open your heroku application in a browser" do
      console "heroku open"
    end
	
    message "The URL for your app is <code>*application name*.heroku.com</code> -- so with the example output in the previous step, it would be <code>floating-winter-18.heroku.com</code>. Verify you see the welcome page. Leave this browser window open."

    message "In the browser, add <code>/users</code> to the end of the URL and hit *enter*. Verify you see the user list page."

    message "Create and save a new user to verify you can write to the database on Heroku."

  end
end

next_step "get_a_sticker"

