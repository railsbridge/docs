
goals do
  goal "Create a local git repository"
  goal "Add all our files to the git repository"

  message "In order to publish our application, we need to add our application and any changes we make over time to a \"revision control system\". In our case we're going to use *git* because it is (relatively) easy and it is what our app server, *Heroku*, uses."
end

steps do

  step do
    console "git init"

    message "It doesn't look like anything really happened, but 'git init' initialized its repository (repo) in a hidden directory called `.git`. You can see this by typing `ls -a` (list all files)."
  end

  step do
    console "git status"

    message "`git status` tells you everything git sees as modified, new, or missing."
    message "You should see a ton of stuff under `Untracked files`."
  end

  step do
    console "git add -A"
    message "`git add -A` tells git that you want to add **a**ll of your changes."
    message "You can add individual files with `git add` followed by the filename instead of `-A`."
    message "For example, `git add foo.txt` would just add the file `foo.txt`."
  end

  step do
    console "git status"

    message "Now you should see a bunch of files listed under `Changes to be
committed`."
  end

  step do
    console "git commit -m \"Added all the things\""
    message "`git commit` tells git to actually _do_ all things you've said you wanted to do."
    message "This is done in two steps so you can group multiple changes together."
    message "`-m \"Added all the things\"`  is just a shortcut to say what your commit message is. You can skip that part and git will bring up an editor to fill out a more detailed message."
  end

  step do
    console "git status"

    message "Now you should see something like `nothing to commit, working
directory clean` which means you've committed all of your changes."
  end
end

explanation do
  message <<-MARKDOWN
By checking your application into git now, you're creating a record of your starting point. Whenever you make a change during today's workshop, we'll add it to git before moving on. This way, if anything ever breaks, or you make a change you don't like, you can use git as an all-powerful "undo" technique. But that only works when you remember to commit early and often!
  MARKDOWN
end

next_step "running_your_application_locally"
