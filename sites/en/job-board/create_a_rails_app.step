message <<-MARKDOWN
  # What we're going to do:

  * Make a new Rails app
  * Add a few gems to make life easier
  * Start the Rails server and see the default Rails page
  * Learn a little about Bundler and dependency management

  # Get Set Up

  First, let's get into a directory for RailsBridge projects (either by finding your existing one & moving there or making a new folder).

  If you don't already have a RailsBridge folder, use the commands `mkdir` and `cd` to create one and move into it:
MARKDOWN

console_without_message "mkdir railsbridge"
console_without_message "cd railsbridge"

message <<-MARKDOWN
  # Rails New!!!
MARKDOWN

option "Without Docker" do
  console "rails new job_board -T --skip-turbolinks"

  message <<-MARKDOWN
    The `-T` in that command means that when you make new files using Rails generators, it doesn't automatically create test files using Test::Unit (the default Rails testing framework).

    Watch all the files that are created! Wow!
  MARKDOWN

  console_with_message "Move into the directory for your new Rails app:", "cd job_board"
end

option "With Docker" do
  console "mkdir job_board"
  console "cd job_board"

  message "In your editor, create a new file called `Gemfile`"
  message "Copy the following into `Gemfile`:"
  source_code :ruby, <<-CONTENTS
    source "https://rubygems.org"
    gem "rails", "5.2.0"
  CONTENTS
  console "touch Gemfile.lock"

  message "In your editor, create a new file called `Dockerfile`:"
  message "Copy the following into `Dockerfile`:"
  source_code :text, <<-CONTENTS
    FROM ruby:2.5.1-slim

    RUN apt-get update -qq && apt-get install -y build-essential libpq-dev git vim nodejs postgresql-client build-essential

    ENV APP_HOME /job_board
    RUN mkdir -p $APP_HOME
    WORKDIR $APP_HOME
    COPY Gemfile* $APP_HOME/
    RUN bundle install --binstubs
    COPY . $APP_HOME
  CONTENTS

  message "In your editor, create a new file called `docker-compose.yml`:"
  message "Copy the following into `docker-compose.yml`:"
  source_code :text, <<-CONTENTS
    version: '3'
    services:
      db:
        image: postgres:10.3
        volumes:
          - db_data:/var/lib/postgresql/data
      web:
        build: .
        environment:
          DB_HOST: db
        tty: true
        stdin_open: true
        volumes:
          - .:/job_board
        command: bin/rails s -p 3000 -b '0.0.0.0'
        ports:
          - "3000:3000"
        depends_on:
          - db
    volumes:
      db_data:
        driver: local
  CONTENTS

  message "Build your rails app:"
  console "docker-compose run web rails new . --force --database=postgresql -T --skip-turbolinks"
  console "docker-compose build"

  message "Setup the database:"
  message "In your editor, open up `config/database.yml` and change it to the following:"
  source_code :ruby, <<-CONTENTS
    default: &default
      adapter: postgresql
      encoding: unicode
      username: postgres
      password:
      pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
      host: <%= ENV.fetch("DB_HOST") %>
    development:
      <<: *default
      database: job_board_development
    test:
      <<: *default
      database: job_board_test
    production:
      <<: *default
      database: job_board_production
      password: <%= ENV['APP_DATABASE_PASSWORD'] %>
  CONTENTS
  console "docker-compose run web bin/rails db:create"
end

message <<-MARKDOWN
  # Open the project in Atom
MARKDOWN

message <<-MARKDOWN
  Open the project in Atom:

  * Open Atom * Under Project, choose "Add Folder to Project"

  (You must have at least one window open, so if that option is greyed out, open a window with cmd+n (Mac) or ctl+n (PC))
MARKDOWN

discussion_box "Text Editor vs Command Line", "Review the differences between the command line and your text editor, even if everyone already knows!"

message "# Let's Talk About Dependencies"

message "When we created a new Rails app, it installed a bunch of stuff by default. The list of things Rails installed is in a file called `Gemfile`. If you want to add any additional third party code (aka **gems**), you can add more lines to the `Gemfile` and install them with `bundle`."

message "Rails has already installed all the stuff we need, but you can always run bundle again to re-install gems, or install gems newly added to the Gemfile. In the command line, run the following command:"

option "Without Docker" do
  console "bundle install"
end

option "With Docker" do
  console "docker-compose run web bundle install"
end

discussion_box "What does 'bundle' do?", <<-MARKDOWN
 Bundler is the tool the Ruby community uses for dependency management.

 * What's dependency management?
 * Why do we need it?
 * Why do we even need gems?
 * Is there a shorter method to use for `bundle install`? (Hint: yes!)
MARKDOWN

message "# Look at your empty app"

tip "Now is a good time to figure out how to have multiple tabs or windows of your terminal or command prompt. Starting and stopping the Rails server all day is tedious, so it's good to have one terminal tab or window for running commands, and a separate one for the server."

message "Start the Rails server by running this command in the terminal:"
option "Without Docker" do
  console "rails server -b 0.0.0.0"
end
option "With Docker" do
  console "docker-compose up"
  message "`docker-compose down` in another terminal to stop rails server"
end

message <<-MARKDOWN
  Now, let's check out our default home page

  In the browser, visit <http://localhost:3000>

  Yup, that's the default Rails home page!
MARKDOWN

next_step "the_request_cycle"
