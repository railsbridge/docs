goals {

  goal "We just added a whole new feature. Let's push it to heroku so our friends can play with it. In order to do so, we need to make a small change to our `Gemfile`"

}

steps {

  step "Edit Gemfile" do

    message <<-MARKDOWN
  Open the file called `Gemfile` in KomodoEdit, or your preferred editor, and find the line containing:

      gem 'sqlite3'

  Remove this line and replace it with:

      group :development do
        gem 'sqlite3'
      end

      group :production do
        gem 'pg'
      end
    MARKDOWN
  end

  step "Redeploy" do

console <<-SHELL
bundle install --without production
rake assets:precompile
git add .
git commit -m "Added topics"
git push heroku master
heroku rake db:migrate
SHELL

    tip "there is a period after the word add in the third line"
  end

  step "Check that it worked" do
    message <<-HEROKU_TOPICS
Open your heroku app in the browser again by typing `heroku open`, then add "topics" to the end of the url. So if your app is called at `http://fierce-meadow-4845.heroku.com/` it should look lile `http://fierce-meadow-4845.heroku.com/topics`

You should see a page that looks shockingly similar to the one you had locally. Test that you can create new topics on Heroku. When you've had enough fun, move on.
    HEROKU_TOPICS

  end
}

explanation {

  message <<-MARKDOWN
  * The Gemfile is a list of all the Ruby libraries your application needs.
    What we've declared here is that we want to use the `sqlite3` library
    while we're developing on our computer (the development group) but when
    deploying to heroku (the production group) we want to use the `pg` library,
    which is made for the type of database that Heroku uses.

  * Bundler is how Ruby projects keep track of the gems that they use. We told
    bundler what we wanted to use in the `Gemfile`, now we need make sure those
    gems are installed. Since we don't have the type of database heroku does, we
    skip the production gems. Don't worry though! Bundler still logs them so
    Heroku will install them when they get your code.

  * Newer versions of Rails do more to help you manage any Javascript or CSS in
    your application. Since Rails has CSS generated by the scaffold, we have to
    make sure it's ready to be deployed to Heroku. That's what the `rake
    assets:precompile` is for.

  * We've done the next three steps before, so we won't go over that again...

  * `heroku rake` executes a rake task on your server, in this case,
    `db:migrate`, just like you did locally.
  MARKDOWN
}

next_step "voting_on_topics"
