goals {

  goal "Now that the structure is complete, let's make the flow work smoothly."

  message "Currently when you go to <http://localhost:3000> you see the \"Welcome
  aboard\" message."

  message "It would be easier to use our app if <http://localhost:3000> went directly to the topics list."

  message "In this step we'll make that happen and learn a bit about routes in Rails."
}

steps {

  step "Add a root route" do
    message "Open `config/routes.rb`. Near the end of the file but before the final end add `root :to => 'topics#index'`. When you are done the last few lines should look like this:"

    source_code :ruby, <<-RUBY
# This is a legacy wild controller route that's not recommended for RESTful applications.
# Note: This route will make all actions in every controller accessible via GET requests.
# match ':controller(/:action(/:id(.:format)))'

root :to => 'topics#index'
    RUBY
  end

  step "Remove the static welcome file" do

    message "  You also need to remove the welcome aboard page for the new route to work."

    console "git rm public/index.html"

  end

  step "Confirm your changes" do
    message "Go back to <http://localhost:3000/>. You should be taken to the topics list automatically."
  end
}

explanation {

 message <<-MARKDOWN
  * `root :to => 'topics#index'` is a rails route that says the default
    address for your site is `topics#index`. `topics#index` is the topics
    list page (the topics controller with the index action).
  * Rails routes control how URLs (web addresses) get matched with
    code on the server. Similar to how addresses match with houses and
    apartments.
  * The file `config/routes.rb` is like an address directory listing the
    possible addresses and which code goes with each one
  * `routes.rb` uses some shortcuts so it doesn't always show all the
    possible URLs. To explore the URLs in more detail we can use the
    terminal.

  At the terminal type `rake routes` you should get something that
  looks like this:

    $ rake routes

         votes GET    /votes(.:format)           {:action=>"index", :controller=>"votes"}
               POST   /votes(.:format)           {:action=>"create", :controller=>"votes"}
      new_vote GET    /votes/new(.:format)       {:action=>"new", :controller=>"votes"}
     edit_vote GET    /votes/:id/edit(.:format)  {:action=>"edit", :controller=>"votes"}
          vote GET    /votes/:id(.:format)       {:action=>"show", :controller=>"votes"}
               PUT    /votes/:id(.:format)       {:action=>"update", :controller=>"votes"}
               DELETE /votes/:id(.:format)       {:action=>"destroy", :controller=>"votes"}
        topics GET    /topics(.:format)          {:action=>"index", :controller=>"topics"}
               POST   /topics(.:format)          {:action=>"create", :controller=>"topics"}
     new_topic GET    /topics/new(.:format)      {:action=>"new", :controller=>"topics"}
    edit_topic GET    /topics/:id/edit(.:format) {:action=>"edit", :controller=>"topics"}
         topic GET    /topics/:id(.:format)      {:action=>"show", :controller=>"topics"}
               PUT    /topics/:id(.:format)      {:action=>"update", :controller=>"topics"}
               DELETE /topics/:id(.:format)      {:action=>"destroy", :controller=>"topics"}
          root        /                          {:action=>"index", :controller=>"topics"}

  This shows all the URLs your application responds to. The code that starts with colons are variables so :id means the id number of the record. The code in parenthesis is optional.

### Exploring Routes (optional)

  Now you can have a look at the paths that are available in your app.
  Let's try looking at one of the topics routes we just generated.
  Open up your rails console and play:

    $ rails console
    >> app.topics_path
    => "/topics"
    >> app.topics_url
    => "http://www.example.com/topics"

  `app` is a special object that represents your entire application.
  You can ask it about its routes (as we just did), play with its
  database connections, or make pseudo-web requests against it with
  `get` or `post` (and lots more).

  MARKDOWN
}

next_step "redirect_to_the_topics_list_after_creating_a_new_topic"
