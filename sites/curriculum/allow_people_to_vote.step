goals do
  goal "Add a button which people can click to cast a vote."
end

steps do

  step "Add the button to the view" do
    message "Edit `app/views/topics/index.html.erb` so that the bottom loop looks like this:"

    source_code :erb, <<-HTML
  <% @topics.each do |topic| %>
    <tr>
      <td><%= topic.title %></td>
      <td><%= topic.description %></td>
      <td><%= pluralize(topic.votes.count, "vote") %></td>
      <td><%= button_to '+1', votes_path(topic_id: topic.id), method: :post %></td>
      <td><%= link_to 'Show', topic %></td>
      <td><%= link_to 'Edit', edit_topic_path(topic) %></td>
      <td><%= link_to 'Destroy', topic, confirm: 'Are you sure?', method: :delete %></td>
    </tr>
  <% end %>
    HTML
  end

  step "Add the create method to the controller" do
    message "Add the following method to `Vote` in `app/controllers/votes_controller.rb`:"
    source_code :ruby, <<-RUBY
class VotesController < ApplicationController
  def create
    topic = Topic.find(params[:topic_id])
    vote = topic.votes.build
    vote.save!
    redirect_to(topics_path)
  end
end
    RUBY
  end

  step "Confirm your changes in the browser" do
    message "Go back to <http://localhost:3000/topics> and try it out."
  end
end

explanation do
  message "First we added these two lines to `app/views/topics/index.html.erb`"

  source_code :erb, <<-HTML
  <td><%= pluralize(topic.votes.count, "vote") %></td>
  <td><%= button_to '+1', votes_path(topic_id: topic.id), method: :post %></td>
  HTML

  message <<-MARKDOWN
  * `pluralize(topic.votes.count, "vote")` displays the number of votes the topic has, plus the word 'vote' or 'votes' accordingly.
  * `button_to '+1'` creates an html button with the value '+1'.
  * `votes_path(topic_id: topic.id)` creates the right url for the action we want to invoke. In this case, we want to create a vote for the current topic.
    * `votes_path(topic_id: 42)` would output `/votes?topic_id=42`
  * `method: :post` ensures we call the `create` action of CRUD, not the `show` action.

  The changes we made to votes controller are a bit more complicated so let's work through them line by line.

  * `topic = Topic.find(params[:topic_id])`
    * Finds the topic in the database with that id and stores it in the variable 'topic'.
    * `params[:topic_id]` corresponds to the topic\\_id part of the votes\\_path above (e.g. `?topic_id=42`).
  * `vote = topic.votes.build` creates a new vote for the current topic.
  * `vote.save!` saves the vote to the database.
  * `redirect_to(topics_path)` tells the browser to go back to topics_path (the topics list).
  MARKDOWN
end

next_step "setting_the_default_page"
